;========================================================================
; Шаблон ioproxy - посредник для взаимодействия с пользовательским интерфейсом (GUI)
(deftemplate ioproxy  
	(slot fact-id)        ; идентификатор факта, используется для изменения
	(multislot answers)   ; возможные ответы пользователя
	(multislot messages)  ; сообщения, отправляемые пользователю
	(slot reaction)       ; реакция пользователя (ожидаемое действие)
	(slot value)          ; выбор пользователя, значение по умолчанию - none
	(slot restore)        ; зарезервированное поле для дополнительной информации
)

; Экземпляр факта ioproxy - начальное состояние системы
(deffacts proxy-fact
	(ioproxy
		(fact-id 0112) ; идентификатор факта (пока не используется)
		(value none)   ; начальное значение (none)
		(messages)     ; пустой список сообщений
	)
)

; Правило clear-messages - очистка сообщений в ioproxy
(defrule clear-messages
	(declare (salience 90)) ; приоритет выполнения правила (90)
	?clear-msg-flg <- (clearmessage) ; факт-триггер для очистки сообщений
	?proxy <- (ioproxy)              ; извлечение текущего факта ioproxy
=>
	(modify ?proxy (messages))       ; очистка списка сообщений
	(retract ?clear-msg-flg)         ; удаление факта-триггера clearmessage
	(printout t "Messages cleared ..." crlf) ; вывод сообщения в консоль
)

; Правило set-output-and-halt - установка нового сообщения и завершение работы системы
(defrule set-output-and-halt
	(declare (salience 99)) ; приоритет выполнения правила (99)
	?current-message <- (sendmessagehalt $?new-msg) ; факт с новыми сообщениями
	?proxy <- (ioproxy (messages $?msg-list))       ; текущий факт ioproxy
=>
	(modify ?proxy (messages ?new-msg))            ; обновление сообщений в ioproxy
	(retract ?current-message)                     ; удаление факта sendmessagehalt
	(halt)                                         ; завершение работы системы
)

; Шаблон fact - описание факта с именем
(deftemplate fact 
	(slot name) ; имя факта
)

; Шаблон add-fact - посредник для добавления новых фактов
(deftemplate add-fact 
	(slot name) ; имя факта для добавления
)	

; Правило set-fact-and-halt - добавление нового факта через GUI и завершение работы системы
(defrule set-fact-and-halt 
	(declare (salience 98)) ; приоритет выполнения правила (98)
	?proxy <- (add-fact (name ?fact)) ; факт с именем нового добавляемого факта
=>
	(assert (fact (name ?fact)))                      ; добавление нового факта в базу знаний
	(retract ?proxy)                                 ; удаление факта add-fact
	(assert (sendmessagehalt "Добавлен факт:" ?fact)) ; отправка сообщения об успешном добавлении
	(halt)                                           ; завершение работы системы
)
;======================================================================================
